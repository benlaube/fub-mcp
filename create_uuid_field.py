"""Create a UUID custom field in Follow Up Boss."""

import asyncio
import sys
import json
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent / "src"))

from fub_mcp.server import call_tool


async def create_uuid_field():
    """Create a UUID custom field."""
    print("=" * 80)
    print("Creating UUID Custom Field")
    print("=" * 80)
    print()
    
    # First check if UUID field already exists
    print("üìã Checking for existing UUID field...")
    try:
        result = await call_tool("get_custom_fields", {})
        response_data = json.loads(result[0].text)
        
        # Find UUID field if it exists
        uuid_field = None
        if "customfields" in response_data:
            for field in response_data["customfields"]:
                field_name = field.get("name", "").lower()
                field_label = field.get("label", "").lower()
                if "uuid" in field_name or "uuid" in field_label:
                    uuid_field = field
                    break
        
        if uuid_field:
            print(f"‚úÖ UUID field already exists:")
            print(f"   Name: {uuid_field.get('name')}")
            print(f"   Label: {uuid_field.get('label')}")
            print(f"   ID: {uuid_field.get('id')}")
            print(f"   Type: {uuid_field.get('type')}")
            return uuid_field
        else:
            print("‚ÑπÔ∏è  UUID field does not exist. Creating new field...")
            print()
    except Exception as e:
        print(f"‚ö†Ô∏è  Error checking existing fields: {e}")
        print("   Proceeding with creation...")
        print()
    
    # Create the UUID field
    print("üîß Creating UUID custom field...")
    try:
        # Note: 'name' is auto-generated by FUB API from 'label'
        result = await call_tool("create_custom_field", {
            "label": "UUID",
            "type": "text",
            "hideIfEmpty": False,
            "readOnly": False
        })
        
        response_data = json.loads(result[0].text)
        
        # Check if creation was successful
        if "id" in response_data or "name" in response_data:
            print("‚úÖ SUCCESS! UUID custom field created:")
            print(json.dumps(response_data, indent=2, default=str))
            return response_data
        else:
            print("‚ö†Ô∏è  Unexpected response format:")
            print(json.dumps(response_data, indent=2, default=str))
            return response_data
            
    except Exception as e:
        print(f"‚ùå Error creating UUID field: {e}")
        error_text = str(e)
        
        # Try to extract error details
        if "errorMessage" in error_text or "error" in error_text.lower():
            print(f"\nError details: {error_text}")
        
        import traceback
        traceback.print_exc()
        return None


if __name__ == "__main__":
    field = asyncio.run(create_uuid_field())
    if field:
        print(f"\n‚úÖ UUID custom field operation completed successfully")
        sys.exit(0)
    else:
        print(f"\n‚ùå Failed to create UUID custom field")
        sys.exit(1)

